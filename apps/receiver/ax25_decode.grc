<?xml version='1.0' encoding='utf-8'?>
<?grc format='1' created='3.7.14'?>
<flow_graph>
  <timestamp>Sat Jan 26 17:36:48 2019</timestamp>
  <block>
    <key>options</key>
    <param>
      <key>author</key>
      <value>Dan Álvarez, based on code by Daniel Estévez</value>
    </param>
    <param>
      <key>window_size</key>
      <value>(1360,2100)</value>
    </param>
    <param>
      <key>category</key>
      <value>[GRC Hier Blocks]</value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>description</key>
      <value>An AX.25 + HDLC decoder for the NanoCom AX100 transceiver. Default baud rate is set to 4800. Includes parser for beacons and images.</value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(8, 16)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>180</value>
    </param>
    <param>
      <key>generate_options</key>
      <value>no_gui</value>
    </param>
    <param>
      <key>hier_block_src_path</key>
      <value>.:</value>
    </param>
    <param>
      <key>id</key>
      <value>ax25_decode</value>
    </param>
    <param>
      <key>max_nouts</key>
      <value>0</value>
    </param>
    <param>
      <key>qt_qss_theme</key>
      <value></value>
    </param>
    <param>
      <key>realtime_scheduling</key>
      <value></value>
    </param>
    <param>
      <key>run_command</key>
      <value>{python} -u {filename}</value>
    </param>
    <param>
      <key>run_options</key>
      <value>prompt</value>
    </param>
    <param>
      <key>run</key>
      <value>True</value>
    </param>
    <param>
      <key>sizing_mode</key>
      <value>fixed</value>
    </param>
    <param>
      <key>thread_safe_setters</key>
      <value></value>
    </param>
    <param>
      <key>title</key>
      <value>Quetzal-1 Receiver</value>
    </param>
    <param>
      <key>placement</key>
      <value>(0,0)</value>
    </param>
  </block>
  <block>
    <key>variable</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(208, 76)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>center_freq</value>
    </param>
    <param>
      <key>value</key>
      <value>437.2e6</value>
    </param>
  </block>
  <block>
    <key>variable</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(728, 12)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>count</value>
    </param>
    <param>
      <key>value</key>
      <value>0</value>
    </param>
  </block>
  <block>
    <key>variable</key>
    <param>
      <key>comment</key>
      <value>baud rate</value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(312, 12)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>data_rate</value>
    </param>
    <param>
      <key>value</key>
      <value>4800</value>
    </param>
  </block>
  <block>
    <key>variable</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(952, 12)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>do_once</value>
    </param>
    <param>
      <key>value</key>
      <value>0</value>
    </param>
  </block>
  <block>
    <key>variable</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(704, 76)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>filename_image</value>
    </param>
    <param>
      <key>value</key>
      <value>""</value>
    </param>
  </block>
  <block>
    <key>variable</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(824, 76)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>filename_image_metadata</value>
    </param>
    <param>
      <key>value</key>
      <value>""</value>
    </param>
  </block>
  <block>
    <key>variable</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(544, 76)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>filename_parsed_beacon</value>
    </param>
    <param>
      <key>value</key>
      <value>""</value>
    </param>
  </block>
  <block>
    <key>variable</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(800, 12)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>filename_raw_beacon</value>
    </param>
    <param>
      <key>value</key>
      <value>""</value>
    </param>
  </block>
  <block>
    <key>variable</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(704, 140)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>gain_mu</value>
    </param>
    <param>
      <key>value</key>
      <value>0.175*3</value>
    </param>
  </block>
  <block>
    <key>variable</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(544, 140)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>hhmmss</value>
    </param>
    <param>
      <key>value</key>
      <value>""</value>
    </param>
  </block>
  <block>
    <key>variable</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(624, 140)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>homedir</value>
    </param>
    <param>
      <key>value</key>
      <value>""</value>
    </param>
  </block>
  <block>
    <key>variable</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(544, 12)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>log</value>
    </param>
    <param>
      <key>value</key>
      <value>0</value>
    </param>
  </block>
  <block>
    <key>variable</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(616, 12)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>samp_per_sym</value>
    </param>
    <param>
      <key>value</key>
      <value>int(samp_rate/symb_rate)</value>
    </param>
  </block>
  <block>
    <key>variable</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(208, 12)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>samp_rate</value>
    </param>
    <param>
      <key>value</key>
      <value>48000</value>
    </param>
  </block>
  <block>
    <key>variable</key>
    <param>
      <key>comment</key>
      <value>equal to baud
rate because no
block coding
or similar
was performed
on data.</value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(408, 12)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>symb_rate</value>
    </param>
    <param>
      <key>value</key>
      <value>4800</value>
    </param>
  </block>
  <block>
    <key>blocks_message_debug</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value>Can be used to print
the raw decoded data
into the terminal</value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>0</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1136, 896)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_message_debug_0</value>
    </param>
  </block>
  <block>
    <key>blocks_multiply_const_vxx</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>const</key>
      <value>5</value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(616, 276)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_multiply_const_vxx_0</value>
    </param>
    <param>
      <key>type</key>
      <value>float</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>blocks_pdu_to_tagged_stream</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>0</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(880, 1148)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_pdu_to_tagged_stream_0</value>
    </param>
    <param>
      <key>type</key>
      <value>byte</value>
    </param>
    <param>
      <key>tag</key>
      <value>packet_len</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
  </block>
  <block>
    <key>blocks_short_to_float</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(280, 276)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_short_to_float_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>scale</key>
      <value>32767.0</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>blocks_throttle</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>0</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(272, 444)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_throttle_0</value>
    </param>
    <param>
      <key>ignoretag</key>
      <value>True</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>samples_per_second</key>
      <value>samp_rate</value>
    </param>
    <param>
      <key>type</key>
      <value>float</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>blocks_udp_source</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(72, 256)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_udp_source_0</value>
    </param>
    <param>
      <key>ipaddr</key>
      <value>localhost</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>eof</key>
      <value>False</value>
    </param>
    <param>
      <key>type</key>
      <value>short</value>
    </param>
    <param>
      <key>psize</key>
      <value>1472</value>
    </param>
    <param>
      <key>port</key>
      <value>7355</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>blocks_wavfile_sink</key>
    <param>
      <key>bits_per_sample</key>
      <value>8</value>
    </param>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>0</value>
    </param>
    <param>
      <key>file</key>
      <value>/home/dan/filtered.wav</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1024, 260)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_wavfile_sink_0</value>
    </param>
    <param>
      <key>nchan</key>
      <value>1</value>
    </param>
    <param>
      <key>samp_rate</key>
      <value>samp_rate</value>
    </param>
  </block>
  <block>
    <key>blocks_wavfile_source</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>0</value>
    </param>
    <param>
      <key>file</key>
      <value>/home/cubesat/03-09-20-2248-UVG.wav</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(32, 436)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_wavfile_source_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>nchan</key>
      <value>1</value>
    </param>
    <param>
      <key>repeat</key>
      <value>False</value>
    </param>
  </block>
  <block>
    <key>parameter</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1064, 16)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>callsign</value>
    </param>
    <param>
      <key>label</key>
      <value>yourcallsign</value>
    </param>
    <param>
      <key>short_id</key>
      <value></value>
    </param>
    <param>
      <key>hide</key>
      <value>none</value>
    </param>
    <param>
      <key>type</key>
      <value>string</value>
    </param>
    <param>
      <key>value</key>
      <value>UVGGCS</value>
    </param>
  </block>
  <block>
    <key>epy_block</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>_io_cache</key>
      <value>('Count packets', 'msg_block', [('count', '0')], [('msg_in', 'message', 1)], [], 'This block counts the amount of decoded packets.\n', ['count'])</value>
    </param>
    <param>
      <key>_source_code</key>
      <value>"""
Embedded Python Blocks:

Each time this file is saved, GRC will instantiate the first class it finds
to get ports and parameters of your block. The arguments to __init__  will
be the parameters. All of them are required to have default values!
"""

import numpy as np
import pylab
from gnuradio import gr
import pmt

class msg_block(gr.basic_block):  # other base classes are basic_block, decim_block, interp_block
    """This block counts the amount of decoded packets.
"""

    def __init__(self, count=0):  # only default arguments here
        """arguments to this function show up as parameters in GRC"""
        gr.basic_block.__init__(
            self,
            name='Count packets',   # will show up in GRC
            in_sig=None,
            out_sig=None
        )

	self.count = count

        #self.message_port_register_out(pmt.intern('msg_out'))
        self.message_port_register_in(pmt.intern('msg_in'))
        self.set_msg_handler(pmt.intern('msg_in'), self.handle_msg)
   
    def handle_msg(self, msg):
    	self.count += 1
    	print(self.count)	

    def work(self, input_items, output_items):
        pass
</value>
    </param>
    <param>
      <key>comment</key>
      <value>Can be used to count
the amount of incoming
packets.</value>
    </param>
    <param>
      <key>count</key>
      <value>0</value>
    </param>
    <param>
      <key>_enabled</key>
      <value>0</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1112, 1012)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>count_packets</value>
    </param>
  </block>
  <block>
    <key>dc_blocker_xx</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(456, 268)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>dc_blocker_xx_0</value>
    </param>
    <param>
      <key>length</key>
      <value>1024</value>
    </param>
    <param>
      <key>long_form</key>
      <value>True</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>type</key>
      <value>ff</value>
    </param>
  </block>
  <block>
    <key>digital_binary_slicer_fb</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value>Used to convert a stream with highs and
lows into a stream of 1's and 0's</value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(376, 680)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>180</value>
    </param>
    <param>
      <key>id</key>
      <value>digital_binary_slicer_fb_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
  </block>
  <block>
    <key>digital_clock_recovery_mm_xx</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value>This block recovers
the clock in the signal,
which should be a 4800 Hz
clock, given that the data
rate is 4800 bauds.</value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(712, 648)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>180</value>
    </param>
    <param>
      <key>gain_mu</key>
      <value>gain_mu</value>
    </param>
    <param>
      <key>gain_omega</key>
      <value>0.25*gain_mu*gain_mu</value>
    </param>
    <param>
      <key>id</key>
      <value>digital_clock_recovery_mm_xx_0_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>mu</key>
      <value>0.5</value>
    </param>
    <param>
      <key>omega_relative_limit</key>
      <value>0.005</value>
    </param>
    <param>
      <key>omega</key>
      <value>10</value>
    </param>
    <param>
      <key>type</key>
      <value>float</value>
    </param>
  </block>
  <block>
    <key>digital_descrambler_bb</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value>This corresponds to
a G3RUH descrambler
according to Estevez, D.</value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(288, 940)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>digital_descrambler_bb_0</value>
    </param>
    <param>
      <key>len</key>
      <value>16</value>
    </param>
    <param>
      <key>mask</key>
      <value>0x21</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>seed</key>
      <value>0</value>
    </param>
  </block>
  <block>
    <key>parameter</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1184, 16)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>latitude</value>
    </param>
    <param>
      <key>label</key>
      <value>latitude (format 00.000 or -00.000)</value>
    </param>
    <param>
      <key>short_id</key>
      <value></value>
    </param>
    <param>
      <key>hide</key>
      <value>none</value>
    </param>
    <param>
      <key>type</key>
      <value>eng_float</value>
    </param>
    <param>
      <key>value</key>
      <value>14.605467</value>
    </param>
  </block>
  <block>
    <key>parameter</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1032, 104)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>longitude</value>
    </param>
    <param>
      <key>label</key>
      <value>longitude (format 00.000 or -00.000)</value>
    </param>
    <param>
      <key>short_id</key>
      <value></value>
    </param>
    <param>
      <key>hide</key>
      <value>none</value>
    </param>
    <param>
      <key>type</key>
      <value>eng_float</value>
    </param>
    <param>
      <key>value</key>
      <value>-90.488364</value>
    </param>
  </block>
  <block>
    <key>low_pass_filter</key>
    <param>
      <key>beta</key>
      <value>6.76</value>
    </param>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>cutoff_freq</key>
      <value>2400</value>
    </param>
    <param>
      <key>decim</key>
      <value>1</value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>type</key>
      <value>fir_filter_fff</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(784, 232)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>gain</key>
      <value>1</value>
    </param>
    <param>
      <key>id</key>
      <value>low_pass_filter_0_0</value>
    </param>
    <param>
      <key>interp</key>
      <value>1</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>samp_rate</key>
      <value>48000</value>
    </param>
    <param>
      <key>width</key>
      <value>2000</value>
    </param>
    <param>
      <key>win</key>
      <value>firdes.WIN_HAMMING</value>
    </param>
  </block>
  <block>
    <key>epy_block</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>_io_cache</key>
      <value>('Quetzal-1 Packet Parser', 'quetzal1_parse', [('filename_parsed_beacon', "''"), ('filename_raw_beacon', "''")], [('in', 'message', 1)], [], '\n    Parse Quetzal-1 packets from the incoming data. \n\n    If beacon, the parsed data will be written into parsed_beaconXXX.txt and printed into terminal. The raw data will be written into raw_beaconXXX.dat\n\n    If acknowledge, the received data will just be printed into terminal.\n\n    If an image packet, only a notice of "image packet detected" will be printed into terminal.\n\n    XXX represents the current date and time. \n\n    Inputs:\n    - filaname_parsed_beacon: the name of the file that saves the parsed beacon data\n    - filename_raw_beacon: the name of the file that saves the raw beacon data\n    ', ['filename_parsed_beacon', 'filename_raw_beacon'])</value>
    </param>
    <param>
      <key>_source_code</key>
      <value>#!/usr/bin/env python
# -*- coding: utf-8 -*-
# 
# Adapted from: Copyright 2018 Daniel Estevez &lt;daniel@destevez.net&gt;
# 
# Modification 2019, Dan Álvarez
# Parser for QUETZAL-1 Beacon
# 
# This is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
# 
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this software; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.
# 

from gnuradio import gr
import pmt
import os
import datetime
import struct

def csp():
	# CSP Header is 4 bytes long

	_format = "L"

	return _format

def identifier():
	# Satellite identifier

    _format = "8s"

    return _format

def cdhs():
	_format = ""

	rtc_hour 			= "B"
	rtc_min				= "B"
	rtc_sec				= "B"
	rtc_day				= "B"
	rtc_month			= "B"
	rtc_year			= "B"
	adm_status			= "B"
	eps_status			= "B"
	htr_status			= "B"
	adcs_status			= "B"
	pld_status			= "B"
	adm_reset_counter 	= "B"
	eps_reset_counter 	= "B"
	adcs_reset_counter1 = "B"			# software reset counter
	adcs_reset_counter2 = "B"			# hardware reset counter
	comm_reset_counter 	= "B"
	reset_counter 		= "H"

	_format = rtc_hour + rtc_min + rtc_sec + rtc_day + rtc_month + rtc_year + adm_status + eps_status + htr_status + adcs_status + pld_status \
	+ adm_reset_counter + eps_reset_counter + adcs_reset_counter1 + adcs_reset_counter2 + comm_reset_counter + reset_counter

	return _format

def eps():
	_format = ""

	# TMP100
	tmp 				= "B"

	# BQ27441 No. 1
	SoC					= "B"
	bat_voltage			= "B"
	ave_current			= "H"
	remaining_capacity	= "H"
	ave_power			= "H"
	SoH 				= "B"

	# INA260 No. 1
	ch1_voltage			= "B"
	ch1_current 		= "H"

	# INA260 No. 2
	ch2_voltage			= "B"
	ch2_current 		= "H"

	# INA260 No. 3
	ch3_voltage			= "B"
	ch3_current 		= "H"

	# Subsystem Currents
	ADCS_current		= "H"
	COMM_current		= "H"
	PLD_current			= "H"
	HTR_current			= "H"
	
	# Overcurrent and Short Circuit Flags
	fault_flags			= "B" 	#bits 0, 1, 2, 3  = overcurrent flags; bits 4, 5, 6, 7 =  short circuit flags.

								# bits 0,4 = ADCS
								# bits 1,5 = COMMS
								# bits 2,6 = PLD
								# bits 3,7 = HEATER

	# Communication and Transmission Flags
	comm_flag			= "B"	# bit0 = INA260 1, bit1 = INA260 2, bit2 = INA260 3, bit3 = BQ27441, bit4 = TMP100
	trans_flag			= "B"	# bit0 = INA260 1, bit1 = INA260 2, bit2 = INA260 3, bit3 = BQ27441, bit4 = TMP100

	_format = tmp + SoC + bat_voltage + ave_current + remaining_capacity + ave_power + SoH + ch1_voltage + ch1_current + ch2_voltage \
	+ ch2_current + ch3_voltage + ch3_current + ADCS_current + COMM_current + PLD_current + HTR_current + fault_flags + comm_flag + trans_flag

	return _format

def adcs():
	_format = ""

	# BNO055 Gyroscope
	gyr_x				= "B"
	gyr_y				= "B"
	gyr_z				= "B"

	# BNO055 Magnetometer
	mag_x 				= "H"
	mag_y 				= "H"
	mag_z 				= "H"

	# ADC No. 1
	ch1_adc1			= "B"
	ch2_adc1			= "B"
	ch3_adc1			= "B"
	ch4_adc1			= "B"
	ch5_adc1			= "B"
	ch6_adc1			= "B"

	# ADC No. 2
	ch1_adc2			= "B"
	ch2_adc2			= "B"
	ch3_adc2			= "B"
	ch4_adc2			= "B"
	ch5_adc2			= "B"
	ch6_adc2			= "B"

	# Temperature Sensors
	bno_temp			= "b"
	tmp100				= "h"

	# Communication and Transmission Flags
	flags    			= "B"	# bit0 = BNO055, bit1 = ADC1, bit2 = ADC2, bit3 = TMP100

	_format = gyr_x + gyr_y + gyr_z + mag_x + mag_y + mag_z + ch1_adc1 + ch2_adc1 + ch3_adc1 + ch4_adc1 + ch5_adc1 + ch6_adc1 \
	+ ch1_adc2 + ch2_adc2 + ch3_adc2 + ch4_adc2 + ch5_adc2 + ch6_adc2 + bno_temp + tmp100 + flags

	return _format

def comm():
	# COMM only returns the package counter, which is in 4 bytes

	_format = "L"

	return _format

def pld():
	_format = ""

	operation 			= "B"
	picture_counter		= "H"

	_format = operation + picture_counter

	return _format

def uvg_message():
	# 27-byte string containing message

	_format	 = "27s"

	return _format

def ram_params():
	# 22 RAM parameters

	cdhs_cycle_time 	= "B"
	cdhs_wdt_time		= "B"
	adm_soc_lim			= "B"
	adcs_soc_lim		= "B"
	comm_soc_lim		= "B"
	pld_soc_lim			= "B"
	htr_cycle_time		= "B"
	htr_on_time			= "B"
	htr_off_time		= "B"
	adm_cycle_time		= "B"
	adm_burn_time		= "B"
	adm_max_cycles		= "B"
	adm_wait_time_1		= "B"
	adm_wait_time_2		= "B"
	adm_enable			= "B"
	comm_cycle_time		= "B"
	pld_cycle_time		= "B"
	pld_op_mode			= "B"
	cam_res				= "B"
	cam_expo			= "B"
	cam_pic_save_time	= "B"
	pay_enable			= "B"

	_format = cdhs_cycle_time + cdhs_wdt_time + adm_soc_lim + adcs_soc_lim + comm_soc_lim + pld_soc_lim + htr_cycle_time \
	+ htr_on_time + htr_off_time + adm_cycle_time + adm_burn_time + adm_max_cycles + adm_wait_time_1 + adm_wait_time_2 \
	+ adm_enable + comm_cycle_time + pld_cycle_time + pld_op_mode + cam_res + cam_expo + cam_pic_save_time + pay_enable

	return _format

def ack():
	# every ack returns 2 bytes, which corresponds to the command that was sent

	byte1 				= "B"
	byte2				= "B"

	_format = byte1 + byte2

	return _format

def format_telemetry(data):
	# parse the data of the whole beacon
	# use "&gt;" for big-endian interpretation of incoming bytes, which is necessary because of how struct.unpack reads and unpacks bytes

	_format = "&gt;" + identifier() + cdhs() + eps() + adcs() + comm() + pld() + ram_params() + uvg_message()

	return struct.unpack(_format,data)

def format_ram_flash_params(data):
	# parse the data of the ram and flash parameters
	# use "&gt;" for big-endian interpretation of incoming bytes, which is necessary because of how struct.unpack reads and unpacks bytes
	
	_format = "&gt;" + ram_params() + ram_params()

	# ram_params() is called twice because the satellite first sends the RAM parameters and then the FLASH parameters, since these are
	# equal (in the order of data), no need to create a function flash_params() that is exactly the same to ram_params().

	return struct.unpack(_format,data)

def format_ack(data):
	# parse the data of an acknowledge
 	# use "&gt;" for big-endian interpretation of incoming bytes, which is necessary because of how struct.unpack reads and unpacks bytes

	_format = "&gt;" + ack()

	return struct.unpack(_format,data)

def parse_telemetry(data):
	# place telemetry into a human readable string
	filedata = ""

	filedata += "\n\n\n\n"
	filedata += "---------------------------\n"
	filedata += "|   QUETZAL-1 TELEMETRY   |\n"
	filedata += "---------------------------\n"
	filedata += "Identifier:                  "+ str(data[0]) + "\n"

	filedata += "\n"
	filedata += "---------------------------\n"
	filedata += "|          CDHS           |\n"
	filedata += "---------------------------\n"
	filedata += "RTC (hh-mm-ss dd-mm-yy):     "+ str(data[1])+ " "+ str(data[2])+ " "+ str(data[3])+ " "+ str(data[4])+ " "+ str(data[5])+ " "+ str(data[6]) + "\n"
	filedata += "ADM Status (a1 a2 a3 a4):    "+ str(data[7] &amp; 0x01) + " " + str((data[7] &amp; 0x02) &gt;&gt; 1) + " " + str((data[7] &amp; 0x04) &gt;&gt; 2) + " " + str((data[7] &amp; 0x08) &gt;&gt; 3) + "\n"
	filedata += "EPS Status:                  "+ str(hex(data[8])) + "\n"
	filedata += "HEATER Status (A/M, On/Off): "+ str((data[9] &amp; 0xF0) &gt;&gt; 4) + " , " + str(data[9] &amp; 0x0F) + "\n"
	filedata += "ADCS Status:                 "+ str(hex(data[10])) + "\n"
	filedata += "PLD Status:                  "+ str(hex(data[11])) + "\n"
	filedata += "ADM Software Reset Counter:  "+ str(data[12]) + "\n"
	filedata += "EPS Software Reset Counter:  "+ str(data[13]) + "\n"
	filedata += "ADCS Software Reset Counter: "+ str(data[14]) + "\n"
	filedata += "ADCS Hardware Reset Counter: "+ str(data[15]) + "\n"
	filedata += "COMM Hardware Reset Counter: "+ str(data[16]) + "\n"
	filedata += "Reset Counter:               "+ str(data[17]) + "\n"

	filedata += "\n"
	filedata += "---------------------------\n"
	filedata += "|           EPS           |\n"
	filedata += "---------------------------\n"
	filedata += "-----------Temps-----------\n"
	if(data[18] == 253 or data[18] == 255):
		filedata += "TMP100 (degC):               "+ str(data[18]) + "\n"
	else:
		filedata += "TMP100 (degC):               "+ str(0.377*data[18]-25) + "\n"

	filedata += "----------BQ27441----------\n"
	filedata += "State of Charge (%):         "+ str(data[19]) + "\n"
	
	if(data[20] == 253 or data[20] == 254 or data[20] == 255):
		filedata += "Battery Voltage (mV):        "+ str(data[20]) + "\n"
	else:	
		filedata += "Battery Voltage (mV):        "+ str(7.9681*data[20]+2492.0319) + "\n"

	if(data[21] == 4093 or data[21] == 4095):
		filedata += "Average Current (mA):        "+ str(data[21]) + "\n"
	else:
		filedata += "Average Current (mA):        "+ str(1.2219*data[21]-2500) + "\n"

	if(data[22] == 4093 or data[22] == 4094 or data[22] == 4095):
		filedata += "Remaining Capacity (mAh):    "+ str(data[22]) + "\n"
	else:
		filedata += "Remaining Capacity (mAh):    "+ str(0.97752*data[22]) + "\n"

	if(data[23] == 4093 or data[23] == 4095):
		filedata += "Average Power (mW):          "+ str(data[23]) + "\n"
	else:
		filedata += "Average Power (mW):          "+ str(4.1544*data[23]-8500) + "\n"

	filedata += "State of Health (%):         "+ str(data[24]) + "\n"

	filedata += "---------INA260 1----------\n"
	if(data[25] == 253 or data[25] == 255):
		filedata += "Channel 1 Voltage (V):       "+ str(data[25]) + "\n" 
	else:
		filedata += "Channel 1 Voltage (V):       "+ str(0.01785*data[25]) + "\n"

	if(data[26] == 4093 or data[26] == 4094 or data[26] == 4095):
		filedata += "Channel 1 Current (mA):      "+ str(data[26]) + "\n"
	else:	
		filedata += "Channel 1 Current (mA):      "+ str(0.6109*data[26]) + "\n"

	filedata += "---------INA260 2----------\n"
	if(data[27] == 253 or data[27] == 255):
		filedata += "Channel 2 Voltage (V):       "+ str(data[27]) + "\n"	
	else:
		filedata += "Channel 2 Voltage (V):       "+ str(0.01785*data[27]) + "\n"

	if(data[28] == 4093 or data[28] == 4094 or data[28] == 4095):
		filedata += "Channel 2 Current (mA):      "+ str(data[28]) + "\n"
	else:
		filedata += "Channel 2 Current (mA):      "+ str(0.6109*data[28]) + "\n"

	filedata += "---------INA260 3----------\n"
	if(data[29] == 253 or data[29] == 255):
		filedata += "Channel 3 Voltage (V):       "+ str(data[29]) + "\n"	
	else:
		filedata += "Channel 3 Voltage (V):       "+ str(0.01785*data[29]) + "\n"

	if(data[30] == 4093 or data[30] == 4094 or data[30] == 4095):
		filedata += "Channel 3 Current (mA):      "+ str(data[30]) + "\n"
	else:
		filedata += "Channel 3 Current (mA):      "+ str(0.6109*data[30]) + "\n"

	filedata += "----Subsystem Currents-----\n"
	filedata += "ADCS Current (mA):           "+ str(data[31]) + "\n"
	filedata += "COMM Current (mA):           "+ str(data[32]) + "\n"
	filedata += "PLD Current (mA):            "+ str(data[33]) + "\n"
	filedata += "HTR Current (mA):            "+ str(data[34]) + "\n"
	filedata += "-----Overcurrent Flags-----\n"
	filedata += "ADCS Overcurrent:            "+ str(data[35] &amp; 0x01) + "\n"
	filedata += "COMM Overcurrent:            "+ str((data[35] &amp; 0x02) &gt;&gt; 1) + "\n"
	filedata += "PLD Overcurrent:             "+ str((data[35] &amp; 0x04) &gt;&gt; 2) + "\n"
	filedata += "Heater Overcurrent:          "+ str((data[35] &amp; 0x08) &gt;&gt; 3) + "\n"
	filedata += "----Short Circuit Flags----\n"
	filedata += "ADCS Short Circuit:          "+ str((data[35] &amp; 0x10) &gt;&gt; 4) + "\n"
	filedata += "COMM Short Circuit:          "+ str((data[35] &amp; 0x20) &gt;&gt; 5) + "\n"
	filedata += "PLD Short Circuit:           "+ str((data[35] &amp; 0x40) &gt;&gt; 6) + "\n"
	filedata += "Heater Short Circuit:        "+ str((data[35] &amp; 0x80) &gt;&gt; 7) + "\n"
	filedata += "----Communication Flags----\n"
	filedata += "INA260 No. 1:                "+ str(data[36] &amp; 0x01) + "\n"
	filedata += "INA260 No. 2:                "+ str((data[36] &amp; 0x02) &gt;&gt; 1) + "\n"
	filedata += "INA260 No. 3:                "+ str((data[36] &amp; 0x04) &gt;&gt; 2) + "\n"
	filedata += "BQ27441:                     "+ str((data[36] &amp; 0x08) &gt;&gt; 3) + "\n"
	filedata += "TMP100:                      "+ str((data[36] &amp; 0x10) &gt;&gt; 4) + "\n"
	filedata += "----Transmission Flags-----\n"
	filedata += "INA260 No. 1:                "+ str(data[37] &amp; 0x01) + "\n"
	filedata += "INA260 No. 2:                "+ str((data[37] &amp; 0x02) &gt;&gt; 1) + "\n"
	filedata += "INA260 No. 3:                "+ str((data[37] &amp; 0x04) &gt;&gt; 2) + "\n"
	filedata += "BQ27441:                     "+ str((data[37] &amp; 0x08) &gt;&gt; 3) + "\n"
	filedata += "TMP100:                      "+ str((data[37] &amp; 0x10) &gt;&gt; 4) + "\n"
	
	filedata += "\n"
	filedata += "---------------------------\n"
	filedata += "|          ADCS           |\n"
	filedata += "---------------------------\n"
	filedata += "------------Gyro-----------\n"
	filedata += "Gyro X (deg/s):              "+ str((data[38]-127.5)/1.275) + "\n"
	filedata += "Gyro Y (deg/s):              "+ str((data[39]-127.5)/1.275) + "\n"
	filedata += "Gyro Z (deg/s):              "+ str((data[40]-127.5)/1.275) + "\n"
	filedata += "--------Magnetometer-------\n"
	filedata += "Mag X (uT):                  "+ str((data[41]-65536.0/2)/(8192.0/325)) + "\n"
	filedata += "Mag Y (uT):                  "+ str((data[42]-65536.0/2)/(8192.0/325)) + "\n"
	filedata += "Mag Z (uT):                  "+ str((data[43]-65536.0/2)/(8192.0/625)) + "\n"
	filedata += "------------ADC1-----------\n"
	filedata += "ADC1 Ch.1 (V):               "+ str(data[44]/77.27) + "\n"
	filedata += "ADC1 Ch.2 (V):               "+ str(data[45]/77.27) + "\n"
	filedata += "ADC1 Ch.3 (V):               "+ str(data[46]/77.27) + "\n"
	filedata += "ADC1 Ch.4 (V):               "+ str(data[47]/77.27) + "\n"
	filedata += "ADC1 Ch.5 (V):               "+ str(data[48]/77.27) + "\n"
	filedata += "ADC1 Ch.6 (V):               "+ str(data[49]/77.27) + "\n"
	filedata += "------------ADC2-----------\n"
	filedata += "ADC2 Ch.1 (V):               "+ str(data[50]/77.27) + "\n"
	filedata += "ADC2 Ch.2 (V):               "+ str(data[51]/77.27) + "\n"
	filedata += "ADC2 Ch.3 (V):               "+ str(data[52]/77.27) + "\n"
	filedata += "ADC2 Ch.4 (V):               "+ str(data[53]/77.27) + "\n"
	filedata += "ADC2 Ch.5 (V):               "+ str(data[54]/77.27) + "\n"
	filedata += "ADC2 Ch.6 (V):               "+ str(data[55]/77.27) + "\n"
	filedata += "-----------Temps-----------\n"
	filedata += "BNO055 Temperature (degC):   "+ str(data[56]) + "\n"
	filedata += "TMP100 Temperature (degC):   "+ str(data[57]) + "\n"
	filedata += "----Transmission Flags-----\n"	
	filedata += "BNO055:                      "+ str(data[58] &amp; 0x01) + "\n"
	filedata += "ADC1:                        "+ str((data[58] &amp; 0x02) &gt;&gt; 1) + "\n"
	filedata += "ADC2:                        "+ str((data[58] &amp; 0x04) &gt;&gt; 2) + "\n"
	filedata += "TMP100:                      "+ str((data[58] &amp; 0x08) &gt;&gt; 3) + "\n"


	filedata += "\n"
	filedata += "---------------------------\n"
	filedata += "|          COMM           |\n"
	filedata += "---------------------------\n"
	filedata += "Package Counter:             "+ str(data[59]) + "\n"

	filedata += "\n"
	filedata += "---------------------------\n"
	filedata += "|           PLD           |\n"
	filedata += "---------------------------\n"
	filedata += "Operation Mode:              "+ str(hex(data[60])) + "\n"
	filedata += "Picture Counter:             "+ str(data[61]) + "\n"

	filedata += "\n"
	filedata += "---------------------------\n"
	filedata += "|       RAM PARAMS        |\n"
	filedata += "---------------------------\n"
	filedata += "CDHS Cycle Time:             "+ str(data[62]) + "\n"
	filedata += "CDHS WDT Time:               "+ str(data[63]) + "\n"
	filedata += "ADM SOC Limit:               "+ str(data[64]) + "\n"
	filedata += "ADCS SOC Limit:              "+ str(data[65]) + "\n"
	filedata += "COMMS SOC Limit:             "+ str(data[66]) + "\n"
	filedata += "PLD SOC Limit:               "+ str(data[67]) + "\n"
	filedata += "HTR Cycle Time:              "+ str(data[68]) + "\n"
	filedata += "Heater Emergency On Time:    "+ str(data[69]) + "\n"
	filedata += "Heater Emergency Off Time:   "+ str(data[70]) + "\n"
	filedata += "ADM Cycle Time:              "+ str(data[71]) + "\n"
	filedata += "ADM Burn Time:               "+ str(data[72]) + "\n"
	filedata += "ADM Max Cycles:              "+ str(data[73]) + "\n"
	filedata += "ADM Wait Time 1:             "+ str(data[74]) + "\n"
	filedata += "ADM Wait Time 2:             "+ str(data[75]) + "\n"
	filedata += "ADM Enable:                  "+ str(data[76]) + "\n"
	filedata += "COMM Cycle Time:             "+ str(data[77]) + "\n"
	filedata += "PLD Cycle Time:              "+ str(data[78]) + "\n"
	filedata += "PLD Operation Mode:          "+ str(data[79]) + "\n"
	filedata += "Camera Resolution:           "+ str(data[80]) + "\n"
	filedata += "Camera Exposure:             "+ str(data[81]) + "\n"
	filedata += "Camera Picture Save Time:    "+ str(data[82]) + "\n"
	filedata += "Payload Enable:              "+ str(data[83]) + "\n"

	filedata += "\n"
	filedata += "UVG Message:                 "+ str(data[84]) + "\n"

	return filedata

def parse_ram_flash_params(data):
	# place ram/flash parameters into human-readable string

	filedata = ""

	filedata += "\n"
	filedata += "---------------------------\n"
	filedata += "|     RAM/FLASH PARAMS     |\n"
	filedata += "---------------------------\n"
	filedata += "CDHS Cycle Time:             "+ str(data[0]) + " / " + str(data[22]) + "\n"
	filedata += "CDHS WDT Time:               "+ str(data[1]) + " / " + str(data[23]) + "\n"
	filedata += "ADM SOC Limit:               "+ str(data[2]) + " / " + str(data[24]) + "\n"
	filedata += "ADCS SOC Limit:              "+ str(data[3]) + " / " + str(data[25]) + "\n"
	filedata += "COMMS SOC Limit:             "+ str(data[4]) + " / " + str(data[26]) + "\n"
	filedata += "PLD SOC Limit:               "+ str(data[5]) + " / " + str(data[27]) + "\n"
	filedata += "HTR Cycle Time:              "+ str(data[6]) + " / " + str(data[28]) + "\n"
	filedata += "Heater Emergency On Time:    "+ str(data[7]) + " / " + str(data[29]) + "\n"
	filedata += "Heater Emergency Off Time:   "+ str(data[8]) + " / " + str(data[30]) + "\n"
	filedata += "ADM Cycle Time:              "+ str(data[9]) + " / " + str(data[31]) + "\n"
	filedata += "ADM Burn Time:               "+ str(data[10]) + " / " + str(data[32]) + "\n"
	filedata += "ADM Max Cycles:              "+ str(data[11]) + " / " + str(data[33]) + "\n"
	filedata += "ADM Wait Time 1:             "+ str(data[12]) + " / " + str(data[34]) + "\n"
	filedata += "ADM Wait Time 2:             "+ str(data[13]) + " / " + str(data[35]) + "\n"
	filedata += "ADM Enable:                  "+ str(data[14]) + " / " + str(data[36]) + "\n"
	filedata += "COMM Cycle Time:             "+ str(data[15]) + " / " + str(data[37]) + "\n"
	filedata += "PLD Cycle Time:              "+ str(data[16]) + " / " + str(data[38]) + "\n"
	filedata += "PLD Operation Mode:          "+ str(data[17]) + " / " + str(data[39]) + "\n"
	filedata += "Camera Resolution:           "+ str(data[18]) + " / " + str(data[40]) + "\n"
	filedata += "Camera Exposure:             "+ str(data[19]) + " / " + str(data[41]) + "\n"
	filedata += "Camera Picture Save Time:    "+ str(data[20]) + " / " + str(data[42]) + "\n"
	filedata += "Payload Enable:              "+ str(data[21]) + " / " + str(data[43]) + "\n"

	return filedata

def parse_ack(data):
	# parse the acknolwedge bytes

	filedata = ""

	filedata += "Acknowledge Detected: " + str(hex(data[0])) + " " + str(hex(data[1]))

	return filedata

class quetzal1_parse(gr.basic_block):
    """
    Parse Quetzal-1 packets from the incoming data. 

    If beacon, the parsed data will be written into parsed_beaconXXX.txt and printed into terminal. The raw data will be written into raw_beaconXXX.dat

    If acknowledge, the received data will just be printed into terminal.

    If an image packet, only a notice of "image packet detected" will be printed into terminal.

    XXX represents the current date and time. 

    Inputs:
    - filaname_parsed_beacon: the name of the file that saves the parsed beacon data
    - filename_raw_beacon: the name of the file that saves the raw beacon data
    """

    def __init__(self, filename_parsed_beacon = "", filename_raw_beacon = ""):
        gr.basic_block.__init__(self,
            name="Quetzal-1 Packet Parser",
            in_sig=[],
            out_sig=[])

        # generate file name and necessary directories
        # in which all received data will be saved
        homedir = os.environ['HOME']

        if not os.path.exists(homedir + "/Received Data"):
        	os.mkdir(homedir + "/Received Data")

        self.filename_parsed_beacon = homedir + "/Received Data/parsed_beacon_" + str(datetime.datetime.now()) + ".txt"		# saves the beacon parsed data
        self.filename_raw_beacon = homedir + "/Received Data/raw_beacon_" + str(datetime.datetime.now()) + ".dat"			# saves the beacon raw data


        self.message_port_register_in(pmt.intern('in'))
        self.set_msg_handler(pmt.intern('in'), self.handle_msg)

    def handle_msg(self, msg_pmt):
		msg = pmt.cdr(msg_pmt)
		if not pmt.is_u8vector(msg):
			print "[ERROR] Received invalid message type. Expected u8vector"
			return
		packet = bytearray(pmt.u8vector_elements(msg))

		try:
			if len(packet) == 141:
				# BEACON
				# bytes 0 through 4 are CSP header, rest is beacon data

				# write raw data into .dat file
				f = open(self.filename_raw_beacon, "a")
				f.write(packet[4:])
				f.close()

				# parse data
				data = format_telemetry(packet[4:])
				parsedData = parse_telemetry(data)                

				# write parsed data into text file
				f = open(self.filename_parsed_beacon, "a")
				f.write(parsedData)
				f.close()

				# print parsed data into terminal
				print parsedData
			elif len(packet) == 236:
				# IMAGE PACKET
				# bytes 0 through 4 are CSP header, rest is image data

				print "Image packet detected"
			elif len(packet) == 6:
				# Acknowledge from satellite
				# bytes 0 through 4 are CSP header, rest is ack data

				# parse ack data
				data = format_ack(packet[4:])
				parsedData = parse_ack(data)

				# print parsed ack into readable text
				print parsedData
			elif len(packet) == 48:
				# RAM/FLASH PARAMS
				# bytes 0 through 4 are CSP header, rest is RAM/FLASH params

				# parse ram/flash parameters into readable text
				data = format_ram_flash_params(packet[4:])
				parsedData = parse_ram_flash_params(data)

				# print parsed ram/flash parameters into terminal
				print parsedData
			else:
				print "GCS Command or Incorrect beacon length"
		except Exception as e:
			print "Could not decode telemetry beacon"
			print(e)
		return</value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>filename_parsed_beacon</key>
      <value>''</value>
    </param>
    <param>
      <key>filename_raw_beacon</key>
      <value>''</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1112, 808)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>quetzal1_parse</value>
    </param>
  </block>
  <block>
    <key>parameter</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1192, 104)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>recstart</value>
    </param>
    <param>
      <key>label</key>
      <value>start of recording, if processing a recording (format YYYY-MM-DD HH:MM:SS)</value>
    </param>
    <param>
      <key>short_id</key>
      <value></value>
    </param>
    <param>
      <key>hide</key>
      <value>none</value>
    </param>
    <param>
      <key>type</key>
      <value>string</value>
    </param>
    <param>
      <key>value</key>
      <value></value>
    </param>
  </block>
  <block>
    <key>satellites_hdlc_deframer</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>check_fcs</key>
      <value>True</value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(480, 948)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>satellites_hdlc_deframer_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>max_length</key>
      <value>10000</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
  </block>
  <block>
    <key>satellites_nrzi_decode</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(96, 960)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>satellites_nrzi_decode_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
  </block>
  <block>
    <key>satellites_print_header</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>0</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1112, 1080)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>satellites_print_header_0</value>
    </param>
  </block>
  <block>
    <key>satellites_print_timestamp</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>0</value>
    </param>
    <param>
      <key>fmt</key>
      <value>%Y-%m-%d %H:%M:%S</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(700, 1104)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>270</value>
    </param>
    <param>
      <key>id</key>
      <value>satellites_print_timestamp_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>count</key>
      <value>True</value>
    </param>
  </block>
  <block>
    <key>satellites_strip_ax25_header</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(776, 944)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>satellites_strip_ax25_header_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
  </block>
  <block>
    <key>satellites_submit</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>0</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(792, 1304)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>satellites_submit_0</value>
    </param>
    <param>
      <key>latitude</key>
      <value>latitude</value>
    </param>
    <param>
      <key>longitude</key>
      <value>longitude</value>
    </param>
    <param>
      <key>noradID</key>
      <value>45598</value>
    </param>
    <param>
      <key>source</key>
      <value>callsign</value>
    </param>
    <param>
      <key>tstamp</key>
      <value>recstart</value>
    </param>
    <param>
      <key>url</key>
      <value>https://db.satnogs.org/api/telemetry/</value>
    </param>
  </block>
  <block>
    <key>satellites_swap_header</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>0</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(912, 1080)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>satellites_swap_header_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
  </block>
  <block>
    <key>epy_block</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>_io_cache</key>
      <value>('Write Photo', 'msg_block', [('filename_image', "''"), ('filename_image_metadata', "''"), ('rtc', '[]'), ('homedir', "''"), ('log', '-1'), ('do_once', '0')], [('msg_in', 'message', 1)], [], 'This block concatenates image packets into a single photo\n\n\tIf it is an image, then it writes to imageXXX.dat and writes the metadata of the image into image_metadataXXX.txt. \n\n\tXXX represents the date and time at the moment of creating the file.\n\n\tEverything is stored in the home directory, in a folder named "Received Data"\n\n\tInputs:\n\t- filename_image: the name of the file that saves the received image\n\t- filaname_image_metadata: the name of the file that saves the metadata of the received image\n\t- rtc: the datetime of the current photo being sent (part of the RTC of the satellite, in the format hh-mm-ss-dd-mm-yy)\n\t- homedir: the home directory of the current PC\n\t- log: each photo packet contains a packet number, this variable saves the packet number of the packet that was just received\n\t- do_once: used to perform an action only once\n\t', ['do_once', 'filename_image', 'filename_image_metadata', 'homedir', 'log', 'rtc'])</value>
    </param>
    <param>
      <key>_source_code</key>
      <value>#!/usr/bin/env python
# -*- coding: utf-8 -*-
# 
# Adapted from: Copyright 2018 Daniel Estevez &lt;daniel@destevez.net&gt;
# 
# Modification 2019, Dan Álvarez
# Image parser for QUETZAL-1 Beacon
# 
# This is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
# 
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this software; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.
# 

import numpy as np
from gnuradio import gr
import pmt
import os

class msg_block(gr.basic_block):  # other base classes are basic_block, decim_block, interp_block
	"""This block concatenates image packets into a single photo

	If it is an image, then it writes to imageXXX.dat and writes the metadata of the image into image_metadataXXX.txt. 

	XXX represents the date and time at the moment of creating the file.

	Everything is stored in the home directory, in a folder named "Received Data"

	Inputs:
	- filename_image: the name of the file that saves the received image
	- filaname_image_metadata: the name of the file that saves the metadata of the received image
	- rtc: the datetime of the current photo being sent (part of the RTC of the satellite, in the format hh-mm-ss-dd-mm-yy)
	- homedir: the home directory of the current PC
	- log: each photo packet contains a packet number, this variable saves the packet number of the packet that was just received
	- do_once: used to perform an action only once
	"""

	def __init__(self, filename_image = "", filename_image_metadata = "", rtc = [], homedir = "", log = -1, do_once = 0):  # only default arguments here
		"""arguments to this function show up as parameters in GRC"""
		gr.basic_block.__init__(
		self,
		name='Write Photo',   # will show up in GRC
		in_sig=None,
		out_sig=None
		)

		# generate filenames and necessary directories
		self.homedir = os.environ['HOME']
		if not os.path.exists(self.homedir + "/Received Data"):
			os.mkdir(self.homedir + "/Received Data")
		self.filename_image = filename_image										# saves the image data
		self.filename_image_metadata = filename_image_metadata						# saves the metadata of each image
		
		# declare other variables
		self.log = log 																# saves the packet number of the last packet
		self.do_once = do_once														# aids in doing a task only once
		self.rtc = rtc																# saves the rtc of the satellite

		self.message_port_register_in(pmt.intern('msg_in'))
		self.set_msg_handler(pmt.intern('msg_in'), self.handle_msg)

	def handle_msg(self, msg):
		_in = pmt.to_python(msg) #the PMT message that comes in is a tuple, the actual packet is in _in[1]

		data = _in[1]

		if len(data) == 236:
			# write to imageXXX.dat if image
			# bytes 0 through 4 are CSP header, rest is image data

			# verify current rtc to past rtc (if they are different, it's a new photo, so create new file names)
			currRTC = [str(val) for val in data[-6:]] 
			if currRTC != self.rtc:
				self.filename_image = self.homedir + "/Received Data/image_" + "-".join(currRTC) + ".dat"
				self.filename_image_metadata = self.homedir + "/Received Data/image_metadata_" + "-".join(currRTC) + ".txt"
				self.do_once = 0

			# open files
			f = open(self.filename_image, "a")
			f2 = open(self.filename_image_metadata, "a")

			# add blocks of zeros as placeholders for missing packets
			if data[-7] &gt; self.log+1:
				diff = data[-7] - self.log - 1				# calculate the amount of packets that were lost
				f.write(np.zeros(224*diff,dtype=np.uint8))	# image packet is 224 bytes

			# compares the packet number of the current and last packets.
			# only write the packet if it is not duplicated (because images are sent with redundancy)
			# also writes the metadata of the image into a readable text file
			if self.log != data[-7]:	
				f.write(data[4:-8])	# image data starts right after CSP header, last 8 bytes are image metadata

				if self.do_once == 0:	# only do this once for every image
					f2.write("Image Number: " + str(data[-8]) + "\n")
					f2.write("RTC (hh-mm-ss-dd-mm-yy): " + "-".join(currRTC) + "\n\n")
					f2.write("Received packets:\n\n")

					self.do_once += 1
				
				f2.write(str(data[-7]) + "\n")	# write the packet number into the metadata text file
				self.log = data[-7]				# save the current packet number
				self.rtc = currRTC				# save current rtc value

			f.close()
			f2.close()

		return

	def work(self, input_items, output_items):
		pass</value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>do_once</key>
      <value>0</value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>filename_image_metadata</key>
      <value>''</value>
    </param>
    <param>
      <key>filename_image</key>
      <value>''</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1112, 652)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>homedir</key>
      <value>''</value>
    </param>
    <param>
      <key>id</key>
      <value>write_photo</value>
    </param>
    <param>
      <key>log</key>
      <value>-1</value>
    </param>
    <param>
      <key>rtc</key>
      <value>[]</value>
    </param>
  </block>
  <block>
    <key>zeromq_pub_sink</key>
    <param>
      <key>address</key>
      <value>tcp://127.0.0.1:1502</value>
    </param>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value>Send decoded frames
(with CSP header)
to Python GUI to be 
parsed and displayed.</value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>0</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1104, 1132)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>hwm</key>
      <value>-1</value>
    </param>
    <param>
      <key>id</key>
      <value>zeromq_pub_sink_0</value>
    </param>
    <param>
      <key>type</key>
      <value>byte</value>
    </param>
    <param>
      <key>pass_tags</key>
      <value>False</value>
    </param>
    <param>
      <key>timeout</key>
      <value>100</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <connection>
    <source_block_id>blocks_multiply_const_vxx_0</source_block_id>
    <sink_block_id>low_pass_filter_0_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_pdu_to_tagged_stream_0</source_block_id>
    <sink_block_id>zeromq_pub_sink_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_short_to_float_0</source_block_id>
    <sink_block_id>dc_blocker_xx_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_throttle_0</source_block_id>
    <sink_block_id>dc_blocker_xx_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_udp_source_0</source_block_id>
    <sink_block_id>blocks_short_to_float_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_wavfile_source_0</source_block_id>
    <sink_block_id>blocks_throttle_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>dc_blocker_xx_0</source_block_id>
    <sink_block_id>blocks_multiply_const_vxx_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>digital_binary_slicer_fb_0</source_block_id>
    <sink_block_id>satellites_nrzi_decode_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>digital_clock_recovery_mm_xx_0_0</source_block_id>
    <sink_block_id>digital_binary_slicer_fb_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>digital_descrambler_bb_0</source_block_id>
    <sink_block_id>satellites_hdlc_deframer_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>low_pass_filter_0_0</source_block_id>
    <sink_block_id>blocks_wavfile_sink_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>low_pass_filter_0_0</source_block_id>
    <sink_block_id>digital_clock_recovery_mm_xx_0_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>satellites_hdlc_deframer_0</source_block_id>
    <sink_block_id>satellites_print_timestamp_0</sink_block_id>
    <source_key>out</source_key>
    <sink_key>in</sink_key>
  </connection>
  <connection>
    <source_block_id>satellites_hdlc_deframer_0</source_block_id>
    <sink_block_id>satellites_strip_ax25_header_0</sink_block_id>
    <source_key>out</source_key>
    <sink_key>in</sink_key>
  </connection>
  <connection>
    <source_block_id>satellites_nrzi_decode_0</source_block_id>
    <sink_block_id>digital_descrambler_bb_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>satellites_print_timestamp_0</source_block_id>
    <sink_block_id>satellites_submit_0</sink_block_id>
    <source_key>out</source_key>
    <sink_key>in</sink_key>
  </connection>
  <connection>
    <source_block_id>satellites_strip_ax25_header_0</source_block_id>
    <sink_block_id>blocks_message_debug_0</sink_block_id>
    <source_key>out</source_key>
    <sink_key>print_pdu</sink_key>
  </connection>
  <connection>
    <source_block_id>satellites_strip_ax25_header_0</source_block_id>
    <sink_block_id>blocks_pdu_to_tagged_stream_0</sink_block_id>
    <source_key>out</source_key>
    <sink_key>pdus</sink_key>
  </connection>
  <connection>
    <source_block_id>satellites_strip_ax25_header_0</source_block_id>
    <sink_block_id>count_packets</sink_block_id>
    <source_key>out</source_key>
    <sink_key>msg_in</sink_key>
  </connection>
  <connection>
    <source_block_id>satellites_strip_ax25_header_0</source_block_id>
    <sink_block_id>quetzal1_parse</sink_block_id>
    <source_key>out</source_key>
    <sink_key>in</sink_key>
  </connection>
  <connection>
    <source_block_id>satellites_strip_ax25_header_0</source_block_id>
    <sink_block_id>satellites_swap_header_0</sink_block_id>
    <source_key>out</source_key>
    <sink_key>in</sink_key>
  </connection>
  <connection>
    <source_block_id>satellites_strip_ax25_header_0</source_block_id>
    <sink_block_id>write_photo</sink_block_id>
    <source_key>out</source_key>
    <sink_key>msg_in</sink_key>
  </connection>
  <connection>
    <source_block_id>satellites_swap_header_0</source_block_id>
    <sink_block_id>satellites_print_header_0</sink_block_id>
    <source_key>out</source_key>
    <sink_key>in</sink_key>
  </connection>
</flow_graph>
